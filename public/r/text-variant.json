{
  "name": "text-variant",
  "type": "registry:block",
  "dependencies": [
    "class-variance-authority"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:block",
      "content": "import { HTMLAttributes, forwardRef, ElementType } from 'react';\r\n\r\nimport { cx } from 'class-variance-authority';\r\n\r\ntype Variant =\r\n  | 'header'\r\n  | 'h1'\r\n  | 'h2'\r\n  | 'h3'\r\n  | 'h4'\r\n  | 'h5'\r\n  | 'h6'\r\n  | 'p'\r\n  | 'span'\r\n  | 'a'\r\n  | 'small'\r\n  | 'strong'\r\n  | 'em'\r\n  | 'blockquote'\r\n  | 'cite'\r\n  | 'q'\r\n  | 'abbr'\r\n  | 'del'\r\n  | 'ins';\r\ntype Element =\r\n  | 'h1'\r\n  | 'h2'\r\n  | 'h3'\r\n  | 'h4'\r\n  | 'h5'\r\n  | 'h6'\r\n  | 'p'\r\n  | 'span'\r\n  | 'a'\r\n  | 'small'\r\n  | 'strong'\r\n  | 'em'\r\n  | 'blockquote'\r\n  | 'cite'\r\n  | 'q'\r\n  | 'abbr'\r\n  | 'del'\r\n  | 'ins';\r\n\r\ninterface TextProps extends Omit<HTMLAttributes<HTMLElement>, 'href'> {\r\n  variant?: Variant;\r\n  as?: ElementType;\r\n  href?: string;\r\n  className?: string;\r\n  children: React.ReactNode;\r\n  title?: string;\r\n}\r\n\r\nconst variantConfig: Record<Variant, { element: Element; className: string }> =\r\n  {\r\n    header: {\r\n      element: 'h1',\r\n      className:\r\n        'mb-3 flex flex-col gap-6 font-extralight text-primary lg:mb-4 lg:gap-8 text-4xl text-primary'\r\n    },\r\n    h1: {\r\n      element: 'h1',\r\n      className:\r\n        'flex font-extralight text-primary lg:mb-2 text-3xl text-primary'\r\n    },\r\n    h2: {\r\n      element: 'h2',\r\n      className: 'flex font-extralight text-2xl text-primary lg:mb-2'\r\n    },\r\n    h3: {\r\n      element: 'h3',\r\n      className: 'flex font-extralight text-xl lg:mb-2'\r\n    },\r\n    p: {\r\n      element: 'p',\r\n      className: 'mb-2 text-sm font-extralight lg:mb-4'\r\n    },\r\n    a: {\r\n      element: 'a',\r\n      className: 'font-extralight hover:underline lg:mb-8'\r\n    },\r\n    h4: {\r\n      element: 'h4',\r\n      className: 'mb-2  text-lg font-extralight  lg:mb-3 lg:text-xl'\r\n    },\r\n    h5: {\r\n      element: 'h5',\r\n      className: 'mb-2 text-base font-extralight lg:mb-3 lg:text-lg'\r\n    },\r\n    h6: {\r\n      element: 'h6',\r\n      className: 'mb-2 text-sm font-extralight  lg:mb-3 lg:text-base'\r\n    },\r\n    span: {\r\n      element: 'span',\r\n      className: 'mb-2 lg:mb-3 text-base font-extralight text-foreground'\r\n    },\r\n    small: {\r\n      element: 'small',\r\n      className: 'mb-2 lg:mb-3 text-sm font-extralight text-muted-foreground'\r\n    },\r\n    strong: {\r\n      element: 'strong',\r\n      className: 'mb-2 lg:mb-3 text-base font-semibold text-foreground'\r\n    },\r\n    em: {\r\n      element: 'em',\r\n      className: 'mb-2 lg:mb-3 text-base italic font-extralight text-foreground'\r\n    },\r\n    blockquote: {\r\n      element: 'blockquote',\r\n      className:\r\n        'mb-2 lg:mb-3 border-l-4 border-primary pl-4 text-base font-extralight text-foreground italic'\r\n    },\r\n    cite: {\r\n      element: 'cite',\r\n      className: 'mb-2 lg:mb-3 text-sm font-extralight text-muted-foreground'\r\n    },\r\n    q: {\r\n      element: 'q',\r\n      className: 'mb-2 lg:mb-3 text-base font-extralight text-foreground italic'\r\n    },\r\n    abbr: {\r\n      element: 'abbr',\r\n      className:\r\n        'mb-2 lg:mb-3 text-base font-extralight text-foreground cursor-help underline-dotted'\r\n    },\r\n    del: {\r\n      element: 'del',\r\n      className:\r\n        'mb-2 lg:mb-3 text-base font-extralight text-muted-foreground line-through'\r\n    },\r\n    ins: {\r\n      element: 'ins',\r\n      className:\r\n        'mb-2 lg:mb-3 text-base font-extralight text-foreground underline'\r\n    }\r\n  };\r\n\r\nconst Text = forwardRef<HTMLElement, TextProps>(\r\n  ({ variant = 'p', as, href, className, children, title, ...props }, ref) => {\r\n    const { element, className: variantClassName } =\r\n      variantConfig[variant] || variantConfig.p;\r\n    const Component = as || element;\r\n\r\n    const elementProps: Record<string, unknown> = {\r\n      ...props,\r\n      ...(variant === 'a' || Component === 'a' ? { href } : {}),\r\n      ...(variant === 'abbr' || Component === 'abbr' ? { title } : {})\r\n    };\r\n\r\n    return (\r\n      <Component\r\n        ref={ref}\r\n        className={cx(variantClassName, className)}\r\n        {...elementProps}\r\n      >\r\n        {children}\r\n      </Component>\r\n    );\r\n  }\r\n);\r\nText.displayName = 'Text';\r\n\r\nexport default Text;\r\n",
      "path": "/components/star-forge/text-variant.tsx",
      "target": "/components/star-forge/text-variant.tsx"
    }
  ]
}